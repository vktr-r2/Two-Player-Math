=begin

DESCRIPTION:
Create a 2-Player math game where players take turns to answer simple math addition problems. 
A new math question is generated for each turn by picking two numbers between 1 and 20. 
The player whose turn it is is prompted the question and must answer correctly or lose a life.

DETAILS:
Both players start with 3 lives. They lose a life if they mis-answer a question. 
At the end of every turn, the game should output the new scores for both players, so players know where they stand.

The game doesn’t end until one of the players loses all their lives. At this point, the game should announce who 
won and what the other player’s score is.



PLAYER: This class represents an individual participant in the game. It holds attributes such as the player's 
name and remaining lives. Initialization will require setting the player's name and initial number of lives. 
The Player class can provide methods to handle losing a life and checking if the player is still in the game (has remaining lives).

TURN: This class manages a single round of the game for one player. It should be responsible for managing the interaction 
between the player and the question for that round. It may not need any specific data at initialization. 
Its main method could be to conduct the turn, which involves presenting a question to the player and handling the player's response.

GAME: This class manages the overall game logic, involving all turns and players. It keeps track of the 
players and whose turn it is, and it determines when the game is over (when a player loses all their lives). 
Initialization might involve setting up the players. The Game class will contain the main game loop, with each iteration 
representing a new turn. Public methods might include methods to start the game, to end the game, and to switch turns between players.

QUESTION: This class is responsible for generating math questions and verifying the answers. 
At initialization, it could randomly generate two numbers for the addition question. 
It should have methods to display the question and to check if an answer is correct.


In this setup, the Turn class could manage who the current_player is for that turn, 
while the Game class manages which player's turn it is. The Game class will still have the game loop, 
with each iteration creating a new Turn.


For user I/O, it may make sense for the Turn class to handle some I/O related to the specific question 
and answer for that turn, while the Game class handles I/O related to the overall game progression and result. 
This keeps the Player and Question classes focused on their own logic.

=end
